                    bool nowaRamka = false;
                    byte[,] ramka = new byte[200, 8];
                    int x = 0, y = 0;

                    for (int wiersz = 0; wiersz < ramka.GetLength(0) - 1; wiersz++)
                        for (int element = 0; element < ramka.GetLength(1) - 1; element++)
                            ramka[wiersz, element] = 0;

                    for (int i = 3; i < tablica.GetLength(0); i++)
                    {

                        if (((tablica[i - 3] == 0xff) && (tablica[i - 2] == 0xff) && (tablica[i - 1] == 0xff) && (tablica[i] == 0xff)))
                        //|| tablica[i])
                        {
                            textBoxZdekodowane.AppendText(Environment.NewLine);
                            textBoxZdekodowane.AppendText("#######################");
                            textBoxZdekodowane.AppendText(Environment.NewLine);

                            //nowaRamka = true;

                            textBoxZdekodowane.AppendText("calkowita liczba bajtów w bloku: ");
                            textBoxZdekodowane.AppendText(((ramka[0, 0] << 8) + ramka[0, 1]).ToString());
                            textBoxZdekodowane.AppendText(Environment.NewLine);

                            textBoxZdekodowane.AppendText("Numer przeajazdu: ");
                            textBoxZdekodowane.AppendText(((ramka[0, 2] << 7) + (ramka[0, 3] >> 1)).ToString());
                            textBoxZdekodowane.AppendText(Environment.NewLine);

                            textBoxZdekodowane.AppendText("Kana³: ");
                            if ((ramka[0, 3] & 0x01) == 0x00) textBoxZdekodowane.AppendText("A");
                            else textBoxZdekodowane.AppendText("B");
                            textBoxZdekodowane.AppendText(Environment.NewLine);

                            textBoxZdekodowane.AppendText("Typ bloku: ");
                            if (ramka[0, 4] == 0x01) textBoxZdekodowane.AppendText("blok danych");
                            else if (ramka[0, 4] == 0x02) textBoxZdekodowane.AppendText("blok pliku");
                            else textBoxZdekodowane.AppendText("nierozpoznany");
                            textBoxZdekodowane.AppendText(Environment.NewLine);

                            textBoxZdekodowane.AppendText("Time Stamp: ");
                            int temp = (ramka[1, 0] << 8) + ramka[1, 1];
                            textBoxZdekodowane.AppendText(((ramka[1, 0] << 8) + ramka[1, 1]).ToString() + "-"); //rok
                            textBoxZdekodowane.AppendText(ramka[1, 2].ToString() + "-"); //mies
                            textBoxZdekodowane.AppendText(ramka[1, 3].ToString() + ", "); //dzien
                            textBoxZdekodowane.AppendText(ramka[1, 4].ToString() + ":"); //h
                            textBoxZdekodowane.AppendText(ramka[1, 5].ToString() + ":"); //min
                            textBoxZdekodowane.AppendText(ramka[1, 6].ToString() + ", "); //s
                            textBoxZdekodowane.AppendText(ramka[1, 7].ToString() + "tick, ");
                            textBoxZdekodowane.AppendText(Environment.NewLine);


                            temp = (((ramka[0, 0] << 8) + ramka[0, 1]) - 4);
                            int iloscWiadomosci = ((((ramka[0, 0] << 8) + ramka[0, 1]) - 4) / 8);


                            for (int nrWiadomosci = 2; nrWiadomosci <= iloscWiadomosci - 1; nrWiadomosci++)
                            {
                                int typWiadomosci = ramka[nrWiadomosci, 0];

                                textBoxZdekodowane.AppendText("Typ wiadomoœci: ");
                                switch (typWiadomosci)
                                {
                                    case 0x01:
                                        textBoxZdekodowane.AppendText("lokalizacja przejazdu: ");
                                        textBoxZdekodowane.AppendText(Convert.ToString(ramka[nrWiadomosci, 1])
                                                                    + Convert.ToString(ramka[nrWiadomosci, 2])
                                                                    + Convert.ToString(ramka[nrWiadomosci, 3])
                                                                    + Convert.ToString(ramka[nrWiadomosci, 4])
                                                                    + Convert.ToString(ramka[nrWiadomosci, 5])
                                                                    + Convert.ToString(ramka[nrWiadomosci, 6])
                                                                    + Convert.ToString(ramka[nrWiadomosci, 7]));
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        break;
                                    case 0x02:
                                        textBoxZdekodowane.AppendText("alarm \n");
                                        //textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("numer alarmu: " + ((ramka[nrWiadomosci, 1] << 8) + ramka[nrWiadomosci, 2]).ToString() + "\n");
                                        //textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("status alarmu: ");
                                        if (ramka[nrWiadomosci, 3] == 0x01) textBoxZdekodowane.AppendText("nie aktywny");
                                        else if (ramka[nrWiadomosci, 3] == 0x02) textBoxZdekodowane.AppendText("aktywny");
                                        else textBoxZdekodowane.AppendText("nieznany, wartosc = " + ramka[nrWiadomosci, 3].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("kategoria alarmu: ");
                                        if (ramka[nrWiadomosci, 4] == 0x01) textBoxZdekodowane.AppendText("pierwsza");
                                        else if (ramka[nrWiadomosci, 4] == 0x02) textBoxZdekodowane.AppendText("druga");
                                        else textBoxZdekodowane.AppendText("nieznany " + ramka[nrWiadomosci, 4].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("grupa alarmu: " + ramka[nrWiadomosci, 5].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);

                                        break;
                                    case 0x03:
                                        textBoxZdekodowane.AppendText("zdarzenie \n");
                                        //textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("numer zdarzenia: " + ((ramka[nrWiadomosci, 1] << 8) + ramka[nrWiadomosci, 2]).ToString() + "\n");
                                        //textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("status zdarzenia: ");
                                        if (ramka[nrWiadomosci, 3] == 0x01) textBoxZdekodowane.AppendText("nie aktywny");
                                        else if (ramka[nrWiadomosci, 3] == 0x02) textBoxZdekodowane.AppendText("aktywny");
                                        else textBoxZdekodowane.AppendText("nieznany" + ramka[nrWiadomosci, 3].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("grupa azdarzenia: " + ramka[nrWiadomosci, 5].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);

                                        break;
                                    case 0x04:
                                        textBoxZdekodowane.AppendText("Diagnostyka czujników ELS-95 \n");






                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        break;
                                    case 0x05:
                                        textBoxZdekodowane.AppendText("Tryb pracy systemu SPA-5 \n");
                                        textBoxZdekodowane.AppendText("Tryb pracy: ");
                                        if (ramka[nrWiadomosci, 1] == 0x01) textBoxZdekodowane.AppendText("START");
                                        else if (ramka[nrWiadomosci, 1] == 0x02) textBoxZdekodowane.AppendText("DIAG");
                                        else if (ramka[nrWiadomosci, 1] == 0x08) textBoxZdekodowane.AppendText("ACTIVE");
                                        else textBoxZdekodowane.AppendText("nieznany" + ramka[nrWiadomosci, 3].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("Numer modulu ktory wymusi³ przejscie do DIAG: ");
                                        textBoxZdekodowane.AppendText(ramka[nrWiadomosci, 2].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("Numer bledu w module: ");
                                        textBoxZdekodowane.AppendText(ramka[nrWiadomosci, 3].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("Numer modulu ktory wymusi³ przejscie do DIAG: ");
                                        textBoxZdekodowane.AppendText(ramka[nrWiadomosci, 4].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("Numer bledu w module: ");
                                        textBoxZdekodowane.AppendText(ramka[nrWiadomosci, 5].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("Numer modulu ktory wymusi³ przejscie do DIAG: ");
                                        textBoxZdekodowane.AppendText(ramka[nrWiadomosci, 6].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        textBoxZdekodowane.AppendText("Numer bledu w module: ");
                                        textBoxZdekodowane.AppendText(ramka[nrWiadomosci, 7].ToString());
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        break;
                                    case 0x06:
                                        textBoxZdekodowane.AppendText("deskryptor pliku \n");



                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        break;
                                    case 0x07:
                                        textBoxZdekodowane.AppendText("diagnostyka EHE-2w01 \n");



                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        break;

                                    default:
                                        textBoxZdekodowane.AppendText("Nierozpoznany typ ramki!!! ");
                                        textBoxZdekodowane.AppendText(Environment.NewLine);
                                        break;


                                }




                            }


                            x = 0;
                            y = 0;

                            for (int wiersz = 0; wiersz < ramka.GetLength(0) - 1; wiersz++)
                                for (int element = 0; element < ramka.GetLength(1) - 1; element++)
                                    ramka[wiersz, element] = 0;

                        }
                        else
                        {
                            ramka[x, y] = tablica[i];
                            y++;
                            if (y >= 8)
                            {
                                y = 0;
                                x++;
                            }
                        }


}







                    //wypisanie bez listy - bardzo wolne!!!
                    //string bufor = "";
                    //int hexNumber = 0, lineNumber = 0;

                    //foreach (byte b in fileBytes)
                    //{
                    //    if (hexNumber == 0) bufor += lineNumber.ToString() + ": ";
                    //    bufor += " ";
                    //    if (b < 16) bufor += "0";
                    //    bufor += b.ToString("x").ToUpperInvariant() ;
                    //    hexNumber++;
                    //    if (hexNumber > 16)
                    //    {
                            
                    //        bufor += '\n';
                    //        hexNumber = 0;
                    //        lineNumber += 16;
                    //    }
                    //}
                    //richTextBoxBin.Text = bufor;
                    //koniec fragmentu wypisanie bez listy














                int l;
                if ( ( l = fileBytes.Length) > 5)
                {
                    //Parallel.For(3, fileBytes.Length, currentByte =>
                    for (int currentByte = 0; currentByte < fileBytes.Length; currentByte++)
                    {
                        if ((fileBytes[currentByte] == 0xff) && (fileBytes[currentByte + 1] == 0xff) &&
                            (fileBytes[currentByte + 2] == 0xff) && (fileBytes[currentByte + 3] == 0xff))
                        {
                            int frameLenght = (fileBytes[currentByte + 4] << 8) + fileBytes[currentByte + 5];
                            //byte[] ramka = new byte[500];
                            if ((fileBytes[currentByte + 8]) == 1)
                            {
                                for (int n = 0; n < frameLenght; n++)
                                {
                                    ramka[n] = fileBytes[currentByte + 4 + n];
                                }
                                ramkaList.Add(ramka);
                            }
                        }
                    }
                    //});

                }
                else
                {

                }

                foreach (byte[] r in ramkaList)
                {


                }





        //private string BinaryStringToHexString(string binary)
        //{
        //    StringBuilder result = new StringBuilder(binary.Length / 8 + 1);

        //    // TODO: check all 1's or 0's... Will throw otherwise

        //    int mod4Len = binary.Length % 8;
        //    if (mod4Len != 0)
        //    {
        //        // pad to length multiple of 8
        //        binary = binary.PadLeft(((binary.Length / 8) + 1) * 8, '0');
        //    }

        //    for (int i = 0; i < binary.Length; i += 8)
        //    {
        //        string eightBits = binary.Substring(i, 8);
        //        result.AppendFormat("{0:X2}", Convert.ToByte(eightBits, 2));
        //    }

        //    return result.ToString();
        //}








        private void AppendTextBoxBinRew(string sText)
        {
            richTextBoxBin.Text = richTextBoxBin.Text.Insert(0,"\r\n" + sText);//dzia³a z BackgroundWorkerem
        }

        private void AppendTextBoxBin(string sText)
        {
            richTextBoxBin.Text = richTextBoxBin.Text + sText + "\n";
        }


        ////BackgroundWorker
        void binHexBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            //var fs = new FileStream(@sConStr, FileMode.Open);
            //var len = (int)fs.Length;
            //var bits = new byte[len];
            //fs.Read(bits, 0, len);
            //string textLine = "";
            //int progress = 0;

            //for (int ix = 0; ix < len; ix += 16)
            //{
            //    var cnt = Math.Min(16, len - ix);
            //    var line = new byte[cnt];
            //    Array.Copy(bits, ix, line, 0, cnt);

            //    textLine += ix.ToString();
            //    textLine += "   ";
            //    textLine += BitConverter.ToString(line);
            //    textLine += "   ";

            //    ///for (int jx = 0; jx < cnt; ++jx)
            //    //    if (line[jx] < 0x20 || line[jx] > 0x7f) line[jx] = (byte)'.';
            //    //////Console.WriteLine(Encoding.ASCII.GetString(line));
            //    //textBoxBin.AppendText(Environment.NewLine);
            //    textLine += Environment.NewLine;



            //    progress = Convert.ToInt32(((ix * 1.0)/len)*100.0);
            //    Thread.Sleep(50);
            //    binHexBackgroundWorker.ReportProgress(progress, textLine);
            //    textLine = "";
            //}

            //fs.Close();

            int numberOfElements = itemsList.Count();
            int progress = 0, n = 0;

            //foreach (string linia in itemsList)
            for (int i = itemsList.Count - 1; i >= 0; i--)
            {
                
                //int arrayLenght = mojaTab.Length;

                    if (binHexBackgroundWorker.CancellationPending)
                        {
                            e.Cancel = true;
                            break;
                        }

                    Thread.Sleep(20);
                    n++;
                    progress = Convert.ToInt32(((n * 1.0) / numberOfElements) * 100.0);
                    binHexBackgroundWorker.ReportProgress(progress, itemsList[i]);
                    

            }






        }

        void binHexBackgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            AppendTextBoxBin(e.UserState.ToString());
            toolStripProgressBar.Value = e.ProgressPercentage;
        }

        void binHexBackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Cancelled)
            {
                AppendTextBoxBin("Przerwano.");
            }
            else
            {
                AppendTextBoxBin("Zakoñczono.");
                toolStripProgressBar.Value = 0;
            }
        }






        void decodeMessagesBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            string textLine = "";
            int progress = 0;


            if (decodeMessagesBackgroundWorker.CancellationPending)
            {
                e.Cancel = true;
                //break; to musi byc w pêtli
            }


            Thread.Sleep(50);
            decodeMessagesBackgroundWorker.ReportProgress(progress, textLine);
        }


        void decodeMessagesBackgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            AppendTextBoxBin(e.UserState.ToString() + "\n");
            toolStripProgressBar.Value = e.ProgressPercentage;
        }

        void decodeMessagesBackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Cancelled)
            {
                AppendTextBoxBin("Przerwano.");
            }
            else
            {
                AppendTextBoxBin("Zakoñczono.");
                toolStripProgressBar.Value = 0;
            }
        }



















        public List<string> DecodeMessageToList(byte[] message)
        {
            List<string> decodedMessage = new List<string>();
            decodedMessage.Clear();
            switch (message[0])
            {
                case Constants.MESSTYPE_LOCATION:
                    decodedMessage.Add(DecodeLocation(message));
                    break;

                case Constants.MESSTYPE_ALERT:
                    decodedMessage = DecodeAlert(message).ToList();
                    break;

                case Constants.MESSTYPE_EVENT:
                    decodedMessage = DecodeEvent(message).ToList();
                    break;

                case Constants.MESSTYPE_ELS95:

                    break;

                case Constants.MESSTYPE_MODE:
                    decodedMessage.Add(DecodeMode(message));
                    break;

                case Constants.MESSTYPE_FILEDESC:

                    break;

                case Constants.MESSTYPE_EHE2:

                    break;

                default:
                    decodedMessage.Add("Message type Error");
                    break;
            }

            return decodedMessage;
        }

        public string[] DecodeMessageToTable(byte[] message)
        {
            int i = 0;
            string[] decodedMessage = new string[4];
            switch (message[0])
            {
                case Constants.MESSTYPE_LOCATION:
                    decodedMessage[0] = DecodeLocation(message);
                    break;

                case Constants.MESSTYPE_ALERT:
                    foreach (string s in DecodeAlert(message))
                        decodedMessage[i++] = s;
                    break;

                case Constants.MESSTYPE_EVENT:
                    foreach (string s in DecodeEvent(message))
                        decodedMessage[i++] = s;
                    break;

                case Constants.MESSTYPE_ELS95:

                    break;

                case Constants.MESSTYPE_MODE:
                    decodedMessage[0] = DecodeMode(message);
                    break;

                case Constants.MESSTYPE_FILEDESC:

                    break;

                case Constants.MESSTYPE_EHE2:

                    break;

                default:

                    break;
            }

            return decodedMessage;
        }




        private string DecodeLocation(byte[] location)
        {

            return "System location";
        }

        private List<string> DecodeAlert(byte[] alert)
        {
            List<string> decodedAlarm = new List<string>();
            int alertNumber = 0;
            string alertName = "";
            string alertStatus = "";
            string alertCategory = "";
            string alertGroup = "";

            alertNumber = (alert[1] << 8) + alert[2];

            alertName = resmgr.GetString("alert" + alertNumber.ToString(), internalCI);
            //alertName = resmgr.GetString("alert" + alertNumber.ToString(), ci);
            if (alertName == null) alertName = "Not Recognized event";

            if (alert[3] == 0x01) alertStatus = resmgr.GetString("alertNotActive", internalCI);
            else if (alert[3] == 0x02) alertStatus = resmgr.GetString("alertActive" , internalCI);
            else alertStatus = resmgr.GetString("alertNotRecognized" , internalCI);
           
            if (alert[4] == 0x01) alertCategory = resmgr.GetString("alertFirstCategory" , internalCI);
            else if (alert[4] == 0x02) alertCategory = resmgr.GetString("alertSecondCategory" , internalCI);
            else alertCategory = resmgr.GetString("alertCategoryNotRecognized" , internalCI);

            alertGroup = alert[5].ToString();

            decodedAlarm.Add("Alert number " + alertNumber.ToString());
            decodedAlarm.Add(alertName);
            decodedAlarm.Add(alertStatus);
            decodedAlarm.Add(alertCategory);
            decodedAlarm.Add(alertGroup);

            return decodedAlarm;
        }

        private List<string> DecodeEvent(byte[] decEvent)
        {
            List<string> decodedEvent = new List<string>();
            int eventNumber = 0;
            string eventName = "";
            string eventStatus = "";
            //string eventCategory = "";
            string eventGroup = "";

            eventNumber = (decEvent[1] << 8) + decEvent[2];

            eventName = resmgr.GetString("event" + eventNumber.ToString(), internalCI);
            if (eventName == null) eventName = "Not Recognized event";

            if (decEvent[3] == 0x01) eventStatus = resmgr.GetString("eventNotActive", internalCI);
            else if (decEvent[3] == 0x02) eventStatus = resmgr.GetString("eventActive", internalCI);
            else eventStatus = resmgr.GetString("eventNotRecognized", internalCI);

            //if (decEvent[4] == 0x01) eventCategory = resmgr.GetString("eventFirstCategory", internalCI);
            //else if (decEvent[4] == 0x02) eventCategory = resmgr.GetString("eventSecondCategory", internalCI);
            //else eventCategory = resmgr.GetString("eventCategoryNotRecognized", internalCI);

            eventGroup = decEvent[5].ToString();

            decodedEvent.Add("Event number " + eventNumber.ToString());
            decodedEvent.Add(eventName);
            decodedEvent.Add(eventStatus);
            decodedEvent.Add("");
            decodedEvent.Add(eventGroup);

            return decodedEvent;
        }

        private string DecodeELS95(byte[] ELS95diag)
        {

            return "ELS-95 diagnostics";
        }

        private string DecodeMode(byte[] SPA5mode)
        {

            return "System mode";
        }

        private string DecodeFileDesc()
        {

            return "File descryptor";
        }

        private string DecodeEHE2(byte[] EHE2diag)
        {

            return "EHE-2 diagnostics";
        }













        public string[][] DecodeDataFrameToTable(byte[] frame) // to do wyciecia
        {
            string[][] table = new string[400][];
            int messageNumber = 0;

            int blkLenght = (frame[0] << 8) + frame[1];
            int lxNumber = (frame[2] << 8) + frame[3];
            int blkType = frame[4];

            DateTime timeStamp = new DateTime(((frame[8] << 8) + frame[9]), frame[10], frame[11], frame[12], frame[13], frame[14]);
            int timeStampTick = frame[15];

            CRC32 = (frame[blkLenght - 4] << 24) + (frame[blkLenght - 3] << 16) + (frame[blkLenght - 2] << 8) + frame[blkLenght - 1];

            if (checkCRC(CRC32) == true)
            {
                if (blkType == 1)
                {
                    int numberOfFrames = (blkLenght - 20) / 8;
                    byte[] byteMessage = new byte[8];

                    for (int i = 0; i < numberOfFrames; i++)
                    {
                        for (int b = 0; b < 8; b++)
                        {
                            byteMessage[b] = frame[16 + (8*i) + b];
                        }

                        Message mess = new Message();
                        string[] t = new string[4];
                        t = mess.DecodeMessageToTable(byteMessage);

                        //for(int j = 0; j < 4; j++)
                        //{
                        //    table[messageNumber][j] = t[j];
                        //}
                        table[messageNumber] = t;



                        messageNumber++;
                    }
                }
            }

            return table;
        }







        public string[][] DecodeFileAsTable(byte[] binFile)
        {
            string[][] table = new string[10000][];
            //int numberOfFrames = 0;

            table[0] = new string[5];
            table[0][0] = "aaa";
            table[0][1] = "bbb";
            table[0][2] = "ccc";
            table[0][3] = "ddd";
            table[0][4] = "eee";

            for (int i = binFile.Length - (1 + 5); i > 0; i--)
            {
                if ((binFile[i] == 0xff) && (binFile[i + 1] == 0xff) && (binFile[i + 2] == 0xff) && (binFile[i + 3] == 0xff) && (binFile[i + 4] != 0xff))
                {
                    int frameLenght = (binFile[i + 4] << 8) + binFile[i + 5];
                    byte[] b = new byte[frameLenght];
                    for (int j = 0; j < frameLenght; j++)
                    {
                        b[j] = binFile[i + 4 + j];
                    }
                    DataFrame df = new DataFrame();
                    string[][] table2 = new string[10][];
                    table2 = df.DecodeDataFrameToTable(b);
                    
                    //// create array of arrays
                    //object[][] tableOfObject = new object[10][];
                    //// create arrays to put in the array of arrays
                    //for (int i = 0; i < 10; i++) tableOfObject[i] = new object[10];

                    //// get row as array
                    //object[] rowOfObject = GetRow();
                    //// put array in array of arrays
                    //tableOfObjects[0] = rowOfObjects;

                    for (int j = 0; j < (table2.Length/4) ; j++)
                    {
                        //table[j][] = table2[j];
                    }


                }

            }


            return table;
        }




        public string[] DecodeMessageToTable(byte[] message)    // to do wyciecia
        {
            int i = 0;
            string[] decodedMessage = new string[4];

            return decodedMessage;
        }




























            DataTable dtLxNum = table.DefaultView.ToTable(true, resmgr.GetString("labelLxNumber", ci));
            //dtLxNum.Rows.Add("");

            DataRow dtrow = dtLxNum.NewRow();
            dtrow[0] = "";
            dtLxNum.Rows.Add(dtrow);

            //dtLxNum.Merge(table.DefaultView.ToTable(true, resmgr.GetString("labelLxNumber", ci)));
            comboBoxLxNumber.DataSource = dtLxNum;
            comboBoxLxNumber.DisplayMember = resmgr.GetString("labelLxNumber", ci);
            comboBoxLxNumber.SelectedText = " ";

            DataTable dtLxChannel = table.DefaultView.ToTable(true, resmgr.GetString("labelChannel", ci));
            comboBoxLxChannel.DataSource = dtLxChannel;
            comboBoxLxChannel.DisplayMember = resmgr.GetString("labelChannel", ci);



            //comboBoxLxNumber.DataSource = customersBindingSource;
            //comboBoxLxNumber.DisplayMember = resmgr.GetString("labelLxNumber", ci);
            //comboBoxLxNumber

            //customersBindingSource.Filter = string.Format("dataGridViewEventsAndAlarms = '{1}'", comboBoxLxNumber.Text);













































